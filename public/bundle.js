/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("var _localStorage$getItem;\nvar ubtn = document.querySelector(\".btn\");\nvar ucon = document.querySelector(\".uf-conatiner\");\nvar pList = document.querySelector(\".parent-list\");\nvar forms = document.querySelector(\".forms\");\nvar uform = document.querySelector(\".update-form\");\nvar input1 = document.querySelector(\".input-1\");\nvar input2 = document.querySelector(\".input-2\");\nvar formSubmittedData = JSON.parse((_localStorage$getItem = localStorage.getItem(\"Data\")) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"[]\");\nvar items = [];\nvar newData = [];\nrender(formSubmittedData);\nvar currentFormItem = -1;\nvar handleSubmit = function handleSubmit(event) {\n  event.preventDefault();\n  if (input1.value.length <= 0 || input2.value.length <= 0) {\n    console.log(input1.value.length);\n    // alert(\"add details in both the field\");\n    createToast(\"warning\");\n  } else {\n    var formData = Object.fromEntries(new FormData(event.currentTarget));\n    // formData[\"isDone\"] = false;\n    // let obj = {\n    //   title: formData.get(\"title\"),\n    //   desc: formData.get(\"desc\"),\n    //   isDone: false\n    // };\n\n    formSubmittedData.unshift(formData);\n    newData.unshift(formData);\n    items = [];\n    console.log(\"form-submitted\");\n    render(formSubmittedData);\n    createToast(\"add\");\n  }\n};\nfunction render(formSubmittedData) {\n  pList.innerHTML = \"\";\n  formSubmittedData.forEach(function (data, index) {\n    var list = document.createElement(\"li\");\n    list.classList.add(\"nodeList\");\n    list.innerHTML = \"<p style = \\\"\".concat(data.isDone && \"text-decoration: line-through\", \"\\\"><span style = \\\"\").concat(data.isDone && \"text-decoration: line-through\", \"\\\" class=\\\"title\\\">\").concat(data.title, \"</span><span style = \\\"\").concat(data.isDone && \"text-decoration: line-through\", \"\\\" class=\\\"description\\\">\").concat(data.desc, \"</span><input class=\\\"done style2\\\" type=\\\"checkbox\\\" \").concat(data.isDone ? \"checked\" : \"\", \"><span class=\\\"c-btns\\\"><button class=\\\"edit\\\"><i class=\\\"fa-solid fa-pen-to-square\\\"></i></button><button class=\\\"delete\\\"><i class=\\\"fa-solid fa-trash\\\"></i></button></span></p>\");\n    pList.appendChild(list);\n    items.push(list);\n  });\n  var nodeList = document.querySelectorAll(\".nodeList\");\n  var nodeListedit = document.querySelectorAll(\".nodeList .edit\");\n  var nodeListdone = document.querySelectorAll(\".nodeList .done\");\n  var nodeListdel = document.querySelectorAll(\".nodeList .delete\");\n  var modify1 = document.querySelector(\".modify-1\");\n  var modify2 = document.querySelector(\".modify-2\");\n  edit(nodeListedit, modify1, modify2);\n  done(nodeListdone, nodeList, newData);\n  deleteList(nodeListdel, formSubmittedData, nodeList, pList);\n  console.log(formSubmittedData);\n  statusBar(nodeList);\n  localStorage.setItem(\"Data\", JSON.stringify(formSubmittedData));\n}\nfunction edit(nodeListedit, modify1, modify2) {\n  nodeListedit.forEach(function (listedit, index) {\n    listedit.addEventListener(\"click\", function () {\n      console.log(uform);\n      currentFormItem = index;\n      modify1.value = formSubmittedData[index].title;\n      modify2.value = formSubmittedData[index].desc;\n      uform.classList.add(\"u-show\");\n      ucon.classList.add(\"u-popup\");\n    });\n  });\n}\nfunction done(nodeListdone, nodeList, newData) {\n  var des = document.querySelectorAll(\".description\");\n  var tit = document.querySelectorAll(\".title\");\n  nodeListdone.forEach(function (listDone, index) {\n    listDone.addEventListener('change', function (e) {\n      // let isDone = formSubmittedData[index][\"isDone\"]\n      console.log(e.target.checked);\n      console.log(formSubmittedData[index].isDone);\n      formSubmittedData[index][\"isDone\"] = !e.target.checked;\n      if (e.target.checked) {\n        formSubmittedData[index].isDone = true;\n        listDone.parentElement.style.textDecoration = \"line-through\";\n        des[index].style.textDecoration = \"line-through\";\n        tit[index].style.textDecoration = \"line-through\";\n        nodeList[index].classList.add(\"green-status\");\n        console.log(formSubmittedData);\n        createToast(\"success\");\n        localStorage.setItem(\"Data\", JSON.stringify(formSubmittedData));\n      } else {\n        formSubmittedData[index].isDone = false;\n        listDone.parentElement.style.textDecoration = \"\";\n        tit[index].style.textDecoration = \"\";\n        des[index].style.textDecoration = \"\";\n        nodeList[index].classList.remove(\"green-status\");\n        console.log(formSubmittedData);\n        localStorage.setItem(\"Data\", JSON.stringify(formSubmittedData));\n      }\n      // render(formSubmittedData);\n    });\n  });\n}\nfunction deleteList(nodeListdel, formSubmittedData, nodeList, pList) {\n  nodeListdel.forEach(function (listdel, index) {\n    listdel.addEventListener(\"click\", function () {\n      listdel.style.backgroundColor = \"purple\";\n      var element = nodeList[index];\n      console.log(element);\n      // debugger\n      formSubmittedData.splice(index, 1);\n      render(formSubmittedData);\n      createToast(\"error\");\n      console.log(\"After-Deleted :\" + formSubmittedData + \"index :\" + index);\n    });\n  });\n}\nforms.addEventListener(\"submit\", handleSubmit);\nvar updateSubmit = function updateSubmit(event) {\n  if (currentFormItem >= 0) {\n    event.preventDefault();\n    var formData = new FormData(event.currentTarget);\n    formSubmittedData[currentFormItem].title = formData.get(\"mtitle\");\n    formSubmittedData[currentFormItem].desc = formData.get(\"mdesc\");\n    var obj = {\n      title: formData.get(\"mtitle\"),\n      desc: formData.get(\"mdesc\")\n    };\n    localStorage.setItem(\"Data\", JSON.stringify(formSubmittedData));\n    console.log(currentFormItem);\n    console.log(\"Update the item with index -> \", currentFormItem, \" \", Date.now());\n    var element = items[currentFormItem];\n    var titleElement = element.querySelector(\".title\");\n    titleElement.innerText = obj.title;\n    var descriptionElement = element.querySelector(\".description\");\n    descriptionElement.innerText = obj.desc;\n    uform.classList.remove(\"u-show\");\n    ucon.classList.remove(\"u-popup\");\n    createToast(\"info\");\n  } else {\n    throw new Error(\"No current item selected!\");\n  }\n  // uform.classList.remove(\"u-popup\");\n};\nuform.addEventListener(\"submit\", updateSubmit);\n\n// document.getElementById(\"httpSubmit\").addEventListener(\"click\", (e) => {\n//   e.preventDefault;\n//   console.log(\"updated data\" + formSubmittedData);\n// });\n\n// ubtn.addEventListener(\"click\", () => {\n//   console.log(\"5\");\n\n// })\n\nfunction statusBar(nodeList) {\n  formSubmittedData.forEach(function (data, index) {\n    if (data.isDone) {\n      nodeList[index].classList.add(\"green-status\");\n    }\n    console.log(data.isDone);\n  });\n}\nvar $ = document;\nvar notifications = $.querySelector(\".notifications\");\n// buttons = $.querySelectorAll(\".buttons .btn\");\n\nvar toastDetails = {\n  timer: 5000,\n  success: {\n    icon: \"fa-circle-check\",\n    text: \"Success: Todo successfully completed.\"\n  },\n  error: {\n    icon: \"fa-solid fa-trash\",\n    text: \"Delete: Todo is deleted.\"\n  },\n  warning: {\n    icon: \"fa-circle-exclamation\",\n    text: \"Warning: Please add the title and description.\"\n  },\n  info: {\n    icon: \"fa-circle-info\",\n    text: \"Update: Todo is updated.\"\n  },\n  add: {\n    icon: \"fa-circle-check\",\n    text: \"List: New list is added.\"\n  }\n};\nvar removeToast = function removeToast(toast) {\n  toast.classList.add(\"hide\");\n  if (toast.timeoutId) clearTimeout(toast.timeoutId); // Clearing the timeout for the toast\n  setTimeout(function () {\n    return toast.remove();\n  }, 500); // Removing the toast after 500ms\n};\nvar createToast = function createToast(id) {\n  // Getting the icon and text for the toast based on the id passed\n  var _toastDetails$id = toastDetails[id],\n    icon = _toastDetails$id.icon,\n    text = _toastDetails$id.text;\n  var toast = $.createElement(\"li\"); // Creating a new 'li' element for the toast\n  toast.className = \"toast \".concat(id); // Setting the classes for the toast\n  // Setting the inner HTML for the toast\n  toast.innerHTML = \"<div class=\\\"column\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa-solid \".concat(icon, \"\\\"></i>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>\").concat(text, \"</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fa-solid fa-xmark\\\" onclick=\\\"removeToast(this.parentElement)\\\"></i>\");\n  notifications.appendChild(toast); // Append the toast to the notification ul\n  // Setting a timeout to remove the toast after the specified duration\n  toast.timeoutId = setTimeout(function () {\n    return removeToast(toast);\n  }, toastDetails.timer);\n};\n\n// Adding a click event listener to each button to create a toast when clicked\n// buttons.forEach(btn => {\n// \tbtn.addEventListener(\"click\", () => createToast(btn.id))\n// });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;